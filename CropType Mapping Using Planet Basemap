// Load required datasets
var trainingData = ee.FeatureCollection('projects/esther-mainaesther77/assets/FieldData');
var cropMask = ee.Image('projects/esther-mainaesther77/assets/Cropmask25');
var planetBasemap = ee.ImageCollection("projects/planet-nicfi/assets/basemaps/africa");

// Print available bands to verify correct names
print("Available bands in Planet NICFI:", planetBasemap.first().bandNames());

// Select a single composite image from Planet NICFI basemap
var planetComposite = planetBasemap.filterDate('2024-11-01', '2024-12-31').mosaic();

// Define crop class mapping (assigning numeric values)
var cropClassMap = {
  'Avocado': 1, 'Bananas': 2, 'Beans': 3, 'Coffee': 4, 'Macadamia': 5,
  'Maize': 6, 'Mango': 7, 'Pineapples': 8, 'Rice': 9, 'Sorghum': 10,
  'Tea': 11, 'Others': 12, 'Arrow Roots': 13 // Added missing class
};

// âœ… Corrected Mapping: Assign crop types safely
trainingData = trainingData.map(function(feature) {
  var cropName = feature.get('Class'); // Get crop name
  var cropID = ee.Dictionary(cropClassMap).get(cropName, 12); // Default to "Others" (12) if not found
  return feature.set('crop_type', ee.Number(cropID)); // Ensure numeric type
});

// âœ… Debugging: Print unique crop classes to verify correct mapping
var uniqueClasses = trainingData.aggregate_array('crop_type').distinct();
print("âœ… Unique Crop Classes in Training Data:", uniqueClasses);

// âœ… Define bands using correct Planet NICFI band names
var bands = ['B', 'G', 'R', 'N']; // Blue, Green, Red, Near-Infrared

// âœ… Compute Vegetation Indices using corrected band names
var ndvi = planetComposite.normalizedDifference(['N', 'R']).rename('NDVI'); // (NIR - Red) / (NIR + Red)
var ndwi = planetComposite.normalizedDifference(['G', 'N']).rename('NDWI'); // (Green - NIR) / (Green + NIR)
var evi = planetComposite.expression(
    '2.5 * ((N - R) / (N + 6 * R - 7.5 * B + 1))', {
      'N': planetComposite.select('N'),
      'R': planetComposite.select('R'),
      'B': planetComposite.select('B')
}).rename('EVI');

// âœ… Combine selected bands and indices
var inputImage = planetComposite.select(bands).addBands([ndvi, evi, ndwi]);

// âœ… Prepare training data (using updated numeric labels)
var labeledData = inputImage.sampleRegions({
  collection: trainingData,
  properties: ['crop_type'], // Now using numeric labels
  scale: 4, 
  tileScale: 4
});

// âœ… Debugging: Check if labeled data contains multiple classes
print("ðŸ“Œ Labeled Data Sample:", labeledData.limit(5));

// âœ… Train a Random Forest Classifier
var classifier = ee.Classifier.smileRandomForest(50).train({
  features: labeledData,
  classProperty: 'crop_type',
  inputProperties: inputImage.bandNames()
});

// âœ… Classify the image
var classified = inputImage.classify(classifier);

// âœ… Apply crop mask AFTER classification
classified = classified.updateMask(cropMask);

// âœ… Define visualization parameters
var visParams = {
  min: 1,
  max: 13,
  palette: ['FF0000', '00FF00', '0000FF', 'FFFF00', 'FF00FF', '00FFFF',
            '800000', '808000', '008000', '800080', '008080', '808080', 'A52A2A']
};

// âœ… Center map and add classification layer
Map.centerObject(trainingData, 10);
Map.addLayer(classified, visParams, 'Crop Classification');

// âœ… Add a legend for crop types
var legend = ui.Panel({style: {position: 'bottom-left', padding: '8px', backgroundColor: 'white'}});
legend.add(ui.Label({value: 'Crop Type Legend', style: {fontWeight: 'bold'}}));

Object.keys(cropClassMap).forEach(function(cropName) {
  var classValue = cropClassMap[cropName]; // Get numeric ID
  var colorBox = ui.Label({
    style: {backgroundColor: visParams.palette[classValue - 1], padding: '6px', margin: '2px', width: '20px'}
  });
  var label = ui.Label(cropName);
  var row = ui.Panel([colorBox, label], ui.Panel.Layout.Flow('horizontal'));
  legend.add(row);
});

Map.add(legend);

// âœ… Print crop classes to console
print('ðŸŒ± Crop Classes:', cropClassMap);
