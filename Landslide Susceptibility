// -------------------- AOI --------------------
/* var aoi = ee.FeatureCollection('projects/project-hakika/assets/ken_admbnda_adm1_iebc_20191031')
  .filter(ee.Filter.eq('ADM1_EN', "Murang'a"));
Map.centerObject(aoi, 9);
*/ 
// -------------------- time and date--------------------
var time_start = '2023-01-01';
var time_end = '2023-12-31';

// -------------------- DEM --------------------
var dem = ee.Image('USGS/SRTMGL1_003').clip(aoi);

// ----------------------------------------------
// 1. TOPOGRAPHY: SLOPE & ELEVATION
// ----------------------------------------------
var slope = ee.Terrain.slope(dem);
var aspect = ee.Terrain.aspect(dem);
var elevation = dem;

// Slope Reclassification (example thresholds, adjust to local conditions)
var slopeClass = slope.expression(
  "(b('slope') < 15) ? 1" +        // low susceptibility
  ": (b('slope') < 30) ? 2" +      // moderate
  ": (b('slope') < 45) ? 3" +      // high
  ": 4",                           // very high
  { 'slope': slope }
).rename('slopeClass');

// Elevation Class
var elevClass = elevation.select('elevation')
  .lt(1500).multiply(1)
  .where(elevation.gte(1500).and(elevation.lt(2000)), 2)
  .where(elevation.gte(2000).and(elevation.lt(2500)), 3)
  .where(elevation.gte(2500), 4)
  .rename('elevClass');

// ----------------------------------------------
// 2. VEGETATION COVER ANALYSIS (NDVI)
// ----------------------------------------------
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
                                    .filterBounds( aoi)
                                    .filterDate(time_start, time_end)
                                    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
                                    .select(['B8', 'B4'])
                                    .mean()
                                    .clip( aoi);
                                    
var ndvi = s2.normalizedDifference(['B8', 'B4']).rename('NDVI');

// Reclassify NDVI
var ndviClass = ndvi.expression(
  "(b('ndvi') < 0.2) ? 4" + // Low NDVI (low veg cover) = high risk
  ": (b('ndvi') < 0.4) ? 3" +
  ": (b('ndvi') < 0.6) ? 2" +
  ": 1", // High NDVI (dense veg cover) = low risk
  { 'ndvi': ndvi }
).rename('ndviClass');


// ----------------------------------------------
// 3. SOIL MOISTURE (Radar-Based - Sentinel-1)
// ----------------------------------------------
var sentinel1 = ee.ImageCollection("COPERNICUS/S1_GRD")
                                     .filterBounds( aoi)
                                     .filterDate(time_start, time_end)
                                     .filter(ee.Filter.eq('instrumentMode', 'IW'))
                                     .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                                     .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                                     .select(['VV', 'VH'])
                                     .mean()
                                     .clip( aoi);
                                     
print('Sentinel-1 count', ee.ImageCollection("COPERNICUS/S1_GRD")
  .filterBounds( aoi)
  .filterDate(time_start, time_end)
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .size());

var soilMoisture = sentinel1.expression(
  '(VH - VV) / (VH + VV)', {
    'VH': sentinel1.select('VH'),
    'VV': sentinel1.select('VV')
  }).rename('SoilMoisture');

// ----------------------------------------------
// 4. PRECIPITATION (Rainfall from CHIRPS)
// ----------------------------------------------
var precipitation = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY")
                                          .filterBounds( aoi)
                                          .filterDate(time_start, time_end)
                                          .sum()
                                          .rename('Precipitation')
                                          .clip( aoi);


// ----------------------------------------------
// 3. LAND COVER
// ----------------------------------------------
var landcover = ee.Image('ESA/WorldCover/v200/2021').clip(aoi);
// Assign higher risk to bare areas, croplands, built-up
var lcRisk = landcover.remap(
  [10,20,30,40,50,60,70,80,90,95,100],   // ESA classes
  [1, 1, 2, 2, 3, 2, 3, 2, 3, 2, 1]     // risk scores
).rename('lcRisk');

// -------------------- Landslide Susceptibility Index (LSI) --------------------

var lsi = slopeClass.add(elevClass).add(lcRisk).rename('LSI');

// Get the maximum value of the LSI image.
var maxVal = ee.Number(
  lsi.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: aoi,
    scale: 30,
    maxPixels: 1e9
  }).get('LSI')
);

// Convert the number to a constant image.
var maxValImage = ee.Image.constant(maxVal);

// Normalize the LSI image by dividing it by the constant image.
// This is the correct way to perform normalization in GEE.
var lsiNorm = lsi.divide(maxValImage).rename('LSI_norm');

// -------------------- Visualization --------------------
Map.addLayer(slope, {min:0, max:60, palette:['white','yellow','orange','red']}, 'Slope (deg)');

// Add Title
var title = ui.Label({
  value: "Landslide Susceptibility Analysis",
  style: { fontSize: '20px', fontWeight: 'bold', margin: '10px' }
});
Map.add(title);

Map.addLayer(lsiNorm, {min:0, max:1, palette:['green','yellow','red']}, 'Landslide Susceptibility');


var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px',
    backgroundColor: 'white'
  }
});
legend.add(ui.Label('Landslide Risk Map', { fontWeight: 'bold' }));

// Legend Colors and Labels
var colors = ['green', 'yellow', 'red'];
var labels = ['Low Risk', 'Moderate Risk', 'High Risk'];

for (var i = 0; i < colors.length; i++) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: colors[i],
      width: '30px',
      height: '30px',
      margin: '5px'
    }
  });
  var label = ui.Label(labels[i], { margin: '4px 6px' });
  legend.add(ui.Panel([colorBox, label], ui.Panel.Layout.Flow('horizontal')));
}

Map.add(legend);


// -------------------- Export --------------------
Export.image.toDrive({
  image: lsiNorm,
  description: 'Landslide_Susceptibility_Muranga_2',
  folder: 'Muranga',
  scale: 30,
  region: aoi.geometry(),
  crs: 'EPSG:4326',
  maxPixels: 1e13
});


// -------------------- CHARTS FOR STATISTICAL ANALYSIS --------------------

var normSlope = slope.divide(ee.Image.constant(slope.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30
}).get('slope')));

var normNDVI = ndvi.divide(ee.Image.constant(ndvi.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30
}).get('NDVI')));

var normSoilMoisture = soilMoisture.divide(ee.Image.constant(soilMoisture.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30
}).get('SoilMoisture')));

var normPrecipitation = precipitation.divide(ee.Image.constant(precipitation.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30
}).get('Precipitation')));

var landslideStats = ee.FeatureCollection([
  ee.Feature(null, { 'Factor': 'Slope', 'Value': normSlope.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: aoi, scale: 500, maxPixels: 1e13 }).get('slope') }),
  ee.Feature(null, { 'Factor': 'Vegetation', 'Value': normNDVI.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: aoi, scale: 500, maxPixels: 1e13 }).get('NDVI') }),
  ee.Feature(null, { 'Factor': 'Soil Moisture', 'Value': normSoilMoisture.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: aoi, scale: 500, maxPixels: 1e13 }).get('SoilMoisture') }),
  ee.Feature(null, { 'Factor': 'Precipitation', 'Value': normPrecipitation.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: aoi, scale: 500, maxPixels: 1e13 }).get('Precipitation') })
]);

var chart = ui.Chart.feature.byFeature(landslideStats, 'Factor', 'Value')
  .setChartType('ColumnChart')
  .setOptions({
    title: 'Landslide Risk Factors',
    hAxis: { title: 'Factor' },
    vAxis: { title: 'Normalized Value' },
    series: { 0: { color: 'red' } }
  });

print(chart);
